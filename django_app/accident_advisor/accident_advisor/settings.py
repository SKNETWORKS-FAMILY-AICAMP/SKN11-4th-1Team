"""
Django settings for accident_advisor project.

Generated by 'django-admin startproject' using Django 5.2.1.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field
"""

from pathlib import Path
import os
from dotenv import load_dotenv

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# .env 파일 로드
load_dotenv(BASE_DIR / '.env')


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv('SECRET_KEY', 'django-insecure--lco9l6n+^z1urxvv(j)t37nd1e-wt6-l*k2%xd^^ze5uy2b*j')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.getenv('DEBUG', 'True').lower() == 'true'

ALLOWED_HOSTS = ['localhost', '127.0.0.1']


# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    
    # ✅ WebSocket 지원 추가
    'channels',
    
    # 우리 앱들
    'core',
    'main',
    'accounts', 
    'community',
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "accident_advisor.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [BASE_DIR / 'templates'],  # 템플릿 폴더 추가
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "accident_advisor.wsgi.application"


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.sqlite3",
        "NAME": BASE_DIR / "db.sqlite3",
    }
}

# 커스텀 User 모델 사용
AUTH_USER_MODEL = 'core.User'

# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = "ko-kr"  # 한국어로 변경

TIME_ZONE = "Asia/Seoul"  # 한국 시간대로 변경

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = "static/"
STATICFILES_DIRS = [BASE_DIR / 'static']  # 정적 파일 폴더 추가

# Media files (업로드된 파일들)
MEDIA_URL = '/media/'
MEDIA_ROOT = BASE_DIR / 'media'

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# 로그인/로그아웃 후 리다이렉트 URL
LOGIN_REDIRECT_URL = '/'
LOGOUT_REDIRECT_URL = '/'

# =============================================================================
# AI 및 분류 시스템 설정
# =============================================================================

# OpenAI API 설정
OPENAI_API_KEY = os.getenv('OPENAI_API_KEY')
FINETUNED_MODEL_ID = os.getenv('FINETUNED_MODEL_ID')

# 분류 시스템 설정
CLASSIFICATION_TIMEOUT = int(os.getenv('CLASSIFICATION_TIMEOUT', '10'))
CLASSIFICATION_MAX_RETRIES = int(os.getenv('CLASSIFICATION_MAX_RETRIES', '3'))
ENABLE_FALLBACK = os.getenv('ENABLE_FALLBACK', 'True').lower() == 'true'

# 지원되는 분류 카테고리
SUPPORTED_CATEGORIES = [
    'accident',    # 교통사고 상황
    'precedent',   # 판례 검색
    'law',         # 도로교통법
    'term',        # 용어 설명
    'general'      # 일반 질문
]

# 분류 시스템 기본 설정
CLASSIFICATION_SYSTEM_PROMPT = "분류: accident|precedent|law|term|general"

# AI 로깅 설정
AI_LOGGING_ENABLED = DEBUG
AI_LOG_REQUESTS = DEBUG
AI_LOG_RESPONSES = DEBUG

# =============================================================================
# Vector DB 및 메타데이터 경로 설정
# =============================================================================

# 메타데이터 폴더 경로 (JSON 파일들이 있는 폴더)
METADATA_PATH = BASE_DIR / 'metadata'

# Vector DB 저장 경로
VECTOR_DB_PATH = BASE_DIR / 'vector_db'

# =============================================================================
# Django 로깅 설정
# =============================================================================

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {module} {message}',
            'style': '{',
        },
        'simple': {
            'format': '{levelname} {message}',
            'style': '{',
        },
    },
    'handlers': {
        'console': {
            'level': 'INFO',
            'class': 'logging.StreamHandler',
            'formatter': 'verbose',
        },
    },
    'loggers': {
        'main.services.ai_classifier': {
            'handlers': ['console'],
            'level': 'INFO',
            'propagate': False,
        },
        'main.views': {
            'handlers': ['console'],
            'level': 'INFO',
            'propagate': False,
        },
    },
}

# ✅ ASGI 설정 추가
ASGI_APPLICATION = "accident_advisor.asgi.application"

# ✅ Channels 설정
CHANNEL_LAYERS = {
    "default": {
        "BACKEND": "channels.layers.InMemoryChannelLayer",
        # 프로덕션에서는 Redis 사용:
        # "BACKEND": "channels_redis.core.RedisChannelLayer",
        # "CONFIG": {
        #     "hosts": [("127.0.0.1", 6379)],
        # },
    },
}
